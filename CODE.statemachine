# StateMachineinVivado
 Implement the state machine in Figure-2 in VHDL. Simulate design writing a test-bench.
library ieee;
use ieee.std_logic_1164.all;
entity state_machine is
port(clk: in std_logic;
reset: in std_logic;
inp: in std_logic;
outp: out std_logic);
end state_machine;
architecture logic_flow of state_machine is
type state is (st0, st1, st2, st3,st4); --type of state machine.
signal present_state, next_state: state;
begin
--Present state update part
p1: process(clk, reset)
begin
if(reset='1') then
present_state<=st0; --default state on reset.
elsif(rising_edge(clk)) then
present_state<=next_state; --state change.
end if;
end process;
--Circuit output, and next state
p2: process (present_state, inp)
begin
case present_state is
when st0 =>
--when current state is "st0"
if(inp='0') then
outp<= '0';
next_state<=st1;
else
outp<='1';
next_state<=st2;
end if;
when st1 =>
--when current state is "st1"
if(inp='0') then
outp<='0';
next_state<=st4;
else
outp<='0';
next_state<=st1;
end if;
when st2 =>
--when current state is "st2"
if(inp='0') then
outp<='1';
next_state<=st0;
else
outp<='0';
next_state<=st3;
end if;

when st4 =>
--when current state is "st4"
if(inp='1') then
outp<='0';
next_state<=st4;
else
outp<='1';
next_state<=st3;
end if;
when st3 =>
--when current state is "st3"
if(inp='0') then
outp<='0';
next_state<=st3;
else
outp<='1';
next_state<=st0;
end if;

end case;
end process;
end logic_flow;

----------TEST BENCH---------------

library IEEE;
use IEEE.Std_logic_1164.all;
entity state_machine_tb is
end;
architecture bench of state_machine_tb is
component state_machine
port(clk, reset: in std_logic;
inp: in std_logic;
outp: out std_logic);
end component;
signal clk, reset: std_logic;
signal inp: std_logic;
signal outp: std_logic;
constant clock_period: time:= 10 ns;
signal stop_the_clock: boolean;
begin
pm: state_machine port map (clk => clk,
reset => reset,
inp => inp,
outp => outp );
ps: process --stimulus
begin
reset<='1'; reset<='0';
inp<='1';
wait for clock_period;
inp<='1';
wait for clock_period;
inp<='1';
wait for clock_period;
inp<='0';
wait for clock_period;
inp<='0';
wait for clock_period;
stop_the_clock<=true;
wait;
end process;
pc: process --clock generation
begin
while not stop_the_clock loop
clk<='0';
wait for clock_period / 2;
clk<='1';
wait for clock_period / 2;
end loop;
wait;
end process;
end;

